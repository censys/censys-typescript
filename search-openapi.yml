openapi: 3.0.3
info:
  title: Censys Search API
  description: 
    "The Censys REST API provides programmatic access to the same data accessible through the web
    interface. API access is governed by our [Terms of Service](https://censys.io/tos/) and all scripted access should use this API.
    Endpoints are hosted at [`https://search.censys.io`](https://search.censys.io) and require authenticating with HTTP basic auth using
    the API ID and secret that are shown on the [account](/account/api) page, which also lists the rate limits that apply to your account.
    \n\n### Use This API
    \n - Import the Censys [Postman Collection](https://github.com/censys/censys-postman) and call the API with Postman.
    \n - Call the API from your Python app using our [Python library](https://github.com/censys/censys-python).
    \n - Call the API from your NodeJS app using our [NodeJS library](https://github.com/censys/censys-node-js).
    "
  contact:
    name: Support
    email: support@censys.io
  version: "2.0"
servers: 
  - url: https://search.censys.io/api
security:
  - basicAuth: []
tags:
  - name: hosts
    description: Everything about Hosts (v2)
  - name: certificates
    description: Everything about Certificates (v1)
  - name: certs
    description: Everything about Certificates (v2)
  - name: data
    description: Everything about Data (v1)
  - name: account
    description: Everything about your Account (v1)
  - name: metadata
    description: Everything about our Data (v2)
  - name: comments
    description: Everything about Comments (v2)
  - name: tags
    description: Everything about Tags (v2)
  - name: experimental
    description: APIs which are subject to change in the future but are available for testing.
paths:
  /v2/hosts/search:
    get:
      tags:
        - hosts
      summary: Returns previews of hosts matching a specified search query
      description:
        "Accepts queries for host or service attributes provided in the Censys
        Search Language and returns a list of matching hosts with some summary fields.
        \n\n**Cursor Pagination**
        \n\nSearch endpoints rely on using cursors for efficient pagination.
        \n\nEach search result may return a `next` and `prev` cursor value
        which can be used to fetch additional pages of results.
        \n\n```json
        \n{\n\t\"links\":{
        \n\t\t\"prev\":\"prevCursorToken\",
        \n\t\t\"next\":\"nextCursorToken\"
        \n\t},
        \n\t[Rest of Response]\n}
        \n```
        \nThe returned cursor token values can be added to the search endpoint as
        a `cursor` parameter to fetch either the next page of results or the previous page.
        \n\nThe entire set of results can be iterated page-by-page using returned
        cursors. If no cursor is given, the first page will be returned."
      externalDocs:
        url: /search/language
      operationId: searchHosts
      parameters:
        - name: q
          in: query
          description: Query used to search for hosts with matching attributes. Uses the Censys Search Language.
          schema:
            type: string
            example: "service.service_name: HTTP"
        - name: per_page
          in: query
          description:
            The maximum number of hits to return in each response (minimum of 1, maximum of 100).
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: virtual_hosts
          in: query
          description: |
            Determine how to query Virtual Hosts. The default is `EXCLUDE` which will ignore any virtual hosts entries.
            When set to `INCLUDE` or `ONLY` virtual hosts will be present in the returned list of hits, with the later
            returning only virtual hosts.

            To learn more, see the [Help Desk article on Virtual Hosts](https://support.censys.io/hc/en-us/articles/4411773845524).
          schema:
            type: string
            enum: [EXCLUDE, INCLUDE, ONLY]
            default: EXCLUDE
        - name: cursor
          in: query
          description:
            Cursor token from the API response, which fetches the next or previous page of hits when added to the endpoint URL.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      query:
                        type: string
                        example: "service.service_name: HTTP"
                      total:
                        type: integer
                        example: 50000
                      hits:
                        type: array
                        items:
                          oneOf:
                            - $ref: "#/components/schemas/HostHit"
                            - $ref: "#/components/schemas/VirtualHostHit"
                        maxItems: 100
                  links:
                    type: object
                    properties:
                      prev:
                        type: string
                        example: "prevCursorToken"
                      next:
                        type: string
                        example: "nextCursorToken"
        400:
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                invalidSearchExample:
                  $ref: "#/components/examples/invalidSearchExample"
        401:
          description: You must authenticate with a valid API ID and secret.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                unauthorizedExample:
                  $ref: "#/components/examples/unauthorizedExample"
        422:
          description: Invalid cursor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                invalidCursorExample:
                  $ref: "#/components/examples/invalidCursorExample"
  /v2/hosts/aggregate:
    get:
      tags:
        - hosts
      summary:
        Returns aggregation of hosts that match the given query string
      description:
        Aggregates hosts that match the given query string into buckets
        based on the given field. See help on the Censys Search Language
        for help on constructing a search query.
      externalDocs:
        url: /search/language
      operationId: aggregateHosts
      parameters:
        - name: q
          in: query
          description:
            Query used to search for Hosts which will be aggregated.
            Query uses the Censys Search Language.
          schema:
            type: string
            example: "service.service_name: HTTP"
        - name: field
          in: query
          description: 
            The field used to aggregated upon and generate buckets for.
            If the field is a service level field, the aggregation result
            will be based on services which belong to hosts which match
            the query, not the hosts themselves.
          required: true
          schema:
            type: string
            example: services.port
        - name: num_buckets
          in: query
          description:
            "The maximum number of buckets used to generate aggregate results."
          schema:
            type: integer
            maximum: 1000
            minimum: 1
            default: 50
        - name: virtual_hosts
          in: query
          description: |
            Determine how to query Virtual Hosts. The default is `EXCLUDE` which will ignore any virtual hosts entries.
            When set to `INCLUDE` or `ONLY` virtual hosts will be present in the returned list of hits, with the later
            returning only virtual hosts.

            To learn more, see the [Help Desk article on Virtual Hosts](https://support.censys.io/hc/en-us/articles/4411773845524).
          schema:
            type: string
            enum: [EXCLUDE, INCLUDE, ONLY]
            default: EXCLUDE
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 500000
                      total_omitted:
                        type: integer
                        example: 500000
                      potential_deviation:
                        type: integer
                        example: 5000
                      buckets:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                              example: "80"
                            count:
                              type: integer
                              example: 50000
                        maxItems: 200
                      query:
                        type: string
                        example: "service.service_name: HTTP"
                      field:
                        type: string
                        example: services.port
        400:
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                invalidSearchExample:
                  $ref: "#/components/examples/invalidSearchExample"
                invalidFieldExample:
                  $ref: "#/components/examples/invalidFieldExample"
                invalidNumBucketsExample:
                  $ref: "#/components/examples/invalidNumBucketsExample"
        401:
          description: You must authenticate with a valid API ID and secret.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                unauthorizedExample:
                  $ref: "#/components/examples/unauthorizedExample"
  /v2/hosts/{ip}:
    get:
      tags:
        - hosts
      summary: Returns host information for the specified IP address
      description: Fetches the entire host entity by IP address and returns the most recent Censys view of the host and its services.
      operationId: viewHost
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: 1.1.1.1
            maxLength: 39
        - name: at_time
          in: query
          description:
            "Fetches the Censys view of a host and its services at the specified point in time.\
            \ Requires historical API access. \nNanosecond precision is allowed. Uses RFC3339 Timestamp."
          schema:
            type: string
            format: date-time
            maxLength: 24
      responses:
        200:
          description: The host was successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/Host"
                    properties:
                      last_updated_at:
                        type: string
                        format: date-time
                        maxLength: 24
                      location_updated_at:
                        type: string
                        format: date-time
                        maxLength: 24
                      autonomous_system_updated_at:
                        type: string
                        format: date-time
                        maxLength: 24
        401:
          description: You must authenticate with a valid API ID and secret.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                unauthorizedExample:
                  $ref: "#/components/examples/unauthorizedExample"
        422:
          description: Invalid IP address.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                invalidIpExample:
                  $ref: "#/components/examples/invalidIpExample"
  /v2/hosts/{ip}/diff:
    get:
      tags:
        - hosts
      summary: Returns a diff of a host against different points in time or against a different host altogether.
      description: |
        The diff endpoint generates a JSONPatch (RFC6902) formatted patch by comparing a host against another host (or itself) at
        optionally given points in time.

        The host as specified by the IP in the path and the `at_time` parameter is referred to as the original host, or simply "A".
        The host specified by the parameters `ip_b` and `at_time_b` is referred to as "B".

        The differential generated provides a sequence of steps needed to transform Host A into Host B.
      operationId: viewHostDiff
      parameters:
        - name: ip
          in: path
          description: The IP Address of the original host. Referred to as Host A.
          required: true
          schema:
            type: string
            example: 1.1.1.1
            maxLength: 39
        - name: ip_b
          in: query
          description: The IP Address of the other host. If not set, defaults to the host provided in the path. Referred to as Host B.
          schema:
            type: string
            example: 1.1.1.2
            maxLength: 39
        - name: at_time
          in: query
          description: |
            The point in time used as the basis for Host A.

            Requires historical API access.
            Nanosecond precision is allowed. Uses RFC3339 Timestamp.
          schema:
            type: string
            format: date-time
            maxLength: 24
        - name: at_time_b
          in: query
          description: |
            The point in time used as the basis for Host B.

            Requires historical API access.
            Nanosecond precision is allowed. Uses RFC3339 Timestamp.
          schema:
            type: string
            format: date-time
            maxLength: 24
      responses:
        200:
          description: A diff was successfully generated for the given host(s).
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      a:
                        type: object
                        properties:
                          ip:
                            type: string
                            description: The IP address of the original host.
                          last_updated_at:
                            type: string
                            format: date-time
                            description: Returned updated timestamp of the original host.
                      b:
                        type: object
                        properties:
                          ip:
                            type: string
                            description: The IP address of the other host.
                          last_updated_at:
                            type: string
                            format: date-time
                            description: Returned updated timestamp of the other host.
                      patch:
                        type: array
                        format: jsonpatch
                        items:
                          type: object
        401:
          description: You must authenticate with a valid API ID and secret.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                unauthorizedExample:
                  $ref: "#/components/examples/unauthorizedExample"
        422:
          description: Invalid IP address.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                invalidIpExample:
                  $ref: "#/components/examples/invalidIpExample"
  /v2/experimental/hosts/{ip}/events:
    get:
      tags:
        - experimental
        - hosts
      summary: Returns host events for the specified IP address
      description: |
        Fetches a list of events for the host with the specified IP address.

        **Cursor Pagination**

        This endpoint relies on using cursors for efficient pagination. Each result may
        return a `next` cursor value which can be used to fetch additional pages of results.
        This endpoint only support forward-pagination.

        ```json
        {
          "links": {
            "next": "nextCursorToken"
          },
          [Rest of Response]
        }
        ```
        The returned cursor token values can be added to the endpoint as a `cursor`
        parameter to fetch the next page of results.
        The entire set of results can be iterated page-by-page using returned
        cursors. If no cursor is given, the first page will be returned.
      operationId: viewHostEvents
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: 1.1.1.1
            maxLength: 39
        - name: start_time
          in: query
          description: |
            An optional RFC3339 timestamp which represents the beginning
            chronological point-in-time (inclusive) from which events
            are returned. This must always be earlier than end_time.
            Precision up to *nanoseconds* is observed and recommended.

            If not provided, this is assumed to be the historical API maximum.
          schema:
            type: string
            format: date-time
            maxLength: 24
        - name: end_time
          in: query
          description: |
            An optional RFC3339 timestamp which represents the ending
            chronological point-in-time (exclusive) from which events
            are returned. This must always be later than start_time.
            Precision up to *nanoseconds* is observed and recommended.

            If not provided, this is assumed to be now.
          schema:
            type: string
            format: date-time
            maxLength: 24
        - name: per_page
          in: query
          description:
            The maximum number of hits to return in each response (minimum of 1, maximum of 50).
          schema:
            type: integer
            maximum: 50
            minimum: 1
            default: 25
        - name: cursor
          in: query
          description:
            Cursor token from the API response, which fetches the next or previous page of hits when added to the endpoint URL.
          schema:
            type: string
        - name: reversed
          in: query
          description:
            Reverse the order of the return events, that is, return events in reversed chronological order.
          schema:
            type: boolean
      responses:
        200:
          description: Events for the host were sucessfully retrieved.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      ip:
                        type: string
                        example: 1.1.1.1
                      events:
                        type: array
                        items:
                          $ref: "#/components/schemas/HostEvent"

        401:
          description: You must authenticate with a valid API ID and secret.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                unauthorizedExample:
                  $ref: "#/components/examples/unauthorizedExample"
        422:
          description: Invalid IP address.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                invalidIpExample:
                  $ref: "#/components/examples/invalidIpExample"
  /v2/hosts/{ip}/names:
    get:
      tags:
        - hosts
      summary: Returns host names for the specified IP address
      description:
        Fetches a list of host names for the specified IP address.
        
      operationId: viewHostNames
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: 1.1.1.1
            maxLength: 39
        - name: per_page
          in: query
          description:
            The maximum number of hits to return in each response (minimum of 1, maximum of 1000).
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: cursor
          in: query
          description:
            Cursor token from the API response, which fetches the next page of names when added to the endpoint URL.
          schema:
            type: string
      responses:
        200:
          description: The host names were successfully retrieved.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      names:
                        type: array
                        items:
                          type: string
                        maxItems: 100
                        example:
                          - "google.com"
                          - "google.co.uk"
                          - "google.com.au"
                          - "..."
                      links:
                        type: object
                        properties:
                          next:
                            type: string
                            example: "nextCursorToken"
                          
        401:
          description: You must authenticate with a valid API ID and secret.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
              examples:
                unauthorizedExample:
                  $ref: "#/components/examples/unauthorizedExample"
  /v2/hosts/{ip}/comments:
    get:
      tags:
        - hosts
        - comments
      summary: Returns a list of comments on the given host.
      description: |
        Returns a list of comments on the given host.
      operationId: getCommentsByHost
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: 1.1.1.1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      ip:
                        type: string
                        example: 1.1.1.1
                      comments:
                        type: array
                        items:
                          $ref: "#/components/schemas/HostComment"
    post:
      tags:
        - hosts
        - comments
      summary: Adds a comment on the given host.
      description: |
        Adds a comment on the given host.
      operationId: addCommentByHost
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: 1.1.1.1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contents:
                  type: string
                  example: "**This is a comment.**"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/HostComment"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /v2/hosts/{ip}/comments/{comment_id}:
    get:
      tags:
        - hosts
        - comments
      summary: Returns a specific comment on the given host.
      description: |
        Returns a specific comment on the given host.
      operationId: getCommentByHost
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: "1.1.1.1"
        - name: comment_id
          in: path
          description: The ID of the requested comment.
          required: true
          schema:
            type: string
            example: "123"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/HostComment"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
    put:
      tags:
        - hosts
        - comments
      summary: Updates a specific comment on the given host.
      description: |
        Updates a specific comment on the given host.
      operationId: updateCommentByHost
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: "1.1.1.1"
        - name: comment_id
          in: path
          description: The ID of the requested comment.
          required: true
          schema:
            type: string
            example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contents:
                  type: string
                  example: "**This is a comment.**"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/HostComment"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
    delete:
      tags:
        - hosts
        - comments
      summary: Deletes a specific comment on the given host.
      description: |
        Deletes a specific comment on the given host.
      operationId: deleteCommentByHost
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: "1.1.1.1"
        - name: comment_id
          in: path
          description: The ID of the requested comment.
          required: true
          schema:
            type: string
            example: "123"
      responses:
        204:
          description: No Content
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        422:
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /v2/metadata/hosts:
    get:
      tags:
        - hosts
        - metadata
      summary: Returns host metadata about what Censys scans for
      description:
        "The host metadata endpoint returns a list of services Censys scans for.
        These are the values that can be given as values for
        the `services.service_name` field in search queries."
      operationId: getHostMetadata
      responses:
        200:
          description: The metadata was retrieved.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      services:
                        type: array
                        items:
                          type: string
                        example:
                          - "HTTP"
                          - "IMAP"
                          - "MQTT"
                          - "SSH"
                          - "..."
  /v2/certificates/{fingerprint}/hosts:
    get:
      tags:
        - certs
      summary: Returns a list of hosts presenting the given certificate.
      description: |
        Returns a list of hosts which contain services presenting this certificate,
        including when the certificate was first observed.

        **Cursor Pagination**

        This endpoint relies on using cursors for efficient pagination. Each result may
        return a `next` cursor value which can be used to fetch additional pages of results.
        This endpoint only support forward-pagination.

        ```json
        {
          "links": {
            "next": "nextCursorToken"
          },
          [Rest of Response]
        }
        ```
        The returned cursor token values can be added to the endpoint as a `cursor`
        parameter to fetch the next page of results.
        The entire set of results can be iterated page-by-page using returned
        cursors. If no cursor is given, the first page will be returned.
      operationId: getHostsByCert
      parameters:
        - name: fingerprint
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
            maxLength: 64
        - name: cursor
          in: query
          description:
            Cursor token from the API response, which fetches the next page of hosts when added to the endpoint URL.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      fingerprint:
                        type: string
                        description: The SHA-256 fingerprint of the certificate.
                      hosts:
                        type: array
                        items:
                          type: object
                          properties:
                            ip:
                              type: string
                            name:
                              type: string
                              description: Name provided if host is a virtual host.
                            observed_at:
                              type: string
                              format: date-time
                              description: Time when certificate was observed.
                            first_observed_at:
                              type: string
                              format: date-time
                              description: Time when the certificate was first observed.
                      links:
                        type: object
                        properties:
                          next:
                            type: string
                            example: "nextCursorToken"
  /v2/certificates/{fingerprint}/comments:
    get:
      tags:
        - certs
        - comments
      summary: Returns a list of comments on the given cert.
      description: |
        Returns a list of comments on the given certificate.
      operationId: getCommentsByCert
      parameters:
        - name: fingerprint
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      fingerprint:
                        type: string
                        example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
                      comments:
                        type: array
                        items:
                          $ref: "#/components/schemas/CertComment"
    post:
      tags:
        - certs
        - comments
      summary: Adds a comment on the given cert.
      description: |
        Adds a comment on the given certificate.
      operationId: addCommentByCert
      parameters:
        - name: fingerprint
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contents:
                  type: string
                  example: "**This is a comment.**"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/CertComment"
  /v2/certificates/{fingerprint}/comments/{comment_id}:
    get:
      tags:
        - certs
        - comments
      summary: Returns a comment on the given cert.
      description: |
        Returns a comment on the given certificate.
      operationId: getCommentByCert
      parameters:
        - name: fingerprint
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
        - name: comment_id
          in: path
          description: The ID of the requested comment.
          required: true
          schema:
            type: string
            example: "123"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/CertComment"
    put:
      tags:
        - certs
        - comments
      summary: Updates a comment on the given cert.
      description: |
        Updates a comment on the given certificate.
      operationId: updateCommentByCert
      parameters:
        - name: fingerprint
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
        - name: comment_id
          in: path
          description: The ID of the requested comment.
          required: true
          schema:
            type: string
            example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contents:
                  type: string
                  example: "**This is a comment.**"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/CertComment"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  error:
                    type: string
                    example: "Not Found"
    delete:
      tags:
        - certs
        - comments
      summary: Deletes a comment on the given cert.
      description: |
        Deletes a comment on the given certificate.
      operationId: deleteCommentByCert
      parameters:
        - name: fingerprint
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
        - name: comment_id
          in: path
          description: The ID of the requested comment.
          required: true
          schema:
            type: string
            example: "123"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      fingerprint:
                        type: string
                        example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
                      comments:
                        type: array
                        items:
                          $ref: "#/components/schemas/CertComment"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  error:
                    type: string
                    example: "Not Found"
  /v1/view/certificates/{sha256}:
    get:
      tags:
        - certificates
      summary: Returns structured certificate data for the specified SHA-256 fingerprint
      description:
        "> The Censys legacy v1 API contains API endpoints which are being maintained until replacement v2 endpoints are available.
        \n\nThe view endpoint returns the current structured data we have on a specific certificate."
      operationId: viewCertificate
      parameters:
        - name: sha256
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
            maxLength: 64
      responses:
        200:
          description: The record was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Certificate"
        404:
          description: The requested record does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1NotFoundExample:
                  $ref: "#/components/examples/v1NotFoundExample"
        429:
          description: Your query was not executed because you have exceeded your specified rate limit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1RateLimitExceededExample:
                  $ref: "#/components/examples/v1RateLimitExceededExample"
        500:
          description: An unexpected error occurred when trying to execute your query. Try again at a later time or contact us at [support@censys.io](mailto:support@censys.io) if the problem persists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1InternalServerErrorExample:
                  $ref: "#/components/examples/v1InternalServerErrorExample"
  /v1/search/certificates:
    post:
      tags:
        - certificates
      summary: Returns a list of certificates that match the given query
      description:
        "> The Censys legacy v1 API contains API endpoints which are being maintained until replacement v2 endpoints are available.
        \n\nThe search endpoint allows searches against the current data in
        the Certificates index using the [legacy search syntax](https://search.censys.io/certificates/help).
        The endpoint returns a paginated result set of hosts (or websites or certificates)
        that match the search. Data should be posted as a JSON request document."
      operationId: searchCertificates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  example: "validation.nss.valid: true"
                page:
                  type: integer
                  example: 1
                fields:
                  type: array
                  items:
                    type: string
                    example: parsed.fingerprint_sha256
                flatten:
                  type: boolean
                  example: false
      responses:
        200:
          description: The search or query executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  metadata:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 127530942
                      query:
                        type: string
                        example: "*"
                      page:
                        type: integer
                        example: 1
                      pages:
                        type: integer
                        example: 1275310
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Certificate"
        400:
          description: Your query could not be executed (e.g., query could not be parsed or timed out.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1BadRequestExample:
                  $ref: "#/components/examples/v1BadRequestExample"
        404:
          description: Specified search index was not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1NotFoundExample:
                  $ref: "#/components/examples/v1NotFoundExample"
        429:
          description: Your query was not executed because you have exceeded your specified rate limit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1RateLimitExceededExample:
                  $ref: "#/components/examples/v1RateLimitExceededExample"
        500:
          description: An unexpected error occurred when trying to execute your query. Try again at a later time or contact us at [support@censys.io](mailto:support@censys.io) if the problem persists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1InternalServerErrorExample:
                  $ref: "#/components/examples/v1InternalServerErrorExample"
  /v1/report/certificates:
    post:
      tags:
        - certificates
      summary: Returns a report for the given query
      description:
        "> The Censys legacy v1 API contains API endpoints which are being maintained until replacement v2 endpoints are available.
        \n\nThe build report endpoint lets you run aggregate reports on the breakdown of a field in a
        result set analogous to the \"Build Report\" functionality in the front end."
      operationId: generateCertificateReport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  example: "parsed.names: 1.1.1.1"
                field:
                  type: string
                  example: parsed.issuer.country.raw
                buckets:
                  type: integer
                  default: 50
                  maximum: 1000
      responses:
        200:
          description: The report was successfully generated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        doc_count:
                          type: integer
                    example:
                      - key: US
                        doc_count: 1000
                      - key: CN
                        doc_count: 100
                    maxItems: 1000
                  metadata:
                    type: object
                    properties:
                      query:
                        type: string
                        example: "parsed.names: 1.1.1.1"
                      count:
                        type: integer
                        example: 2570
                      buckets:
                        type: integer
                        example: 50
                      backend_time:
                        type: integer
                        example: 100
                      nonnull_count:
                        type: integer
                        example: 2000
                      other_result_count:
                        type: integer
                        example: 10
                      error_bound:
                        type: integer
                        example: 0
        400:
          description: Your query could not be executed (e.g., query could not be parsed or timed out.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1BadRequestExample:
                  $ref: "#/components/examples/v1BadRequestExample"
        429:
          description: Your query was not executed because you have exceeded your specified rate limit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1RateLimitExceededExample:
                  $ref: "#/components/examples/v1RateLimitExceededExample"
        500:
          description: An unexpected error occurred when trying to execute your query. Try again at a later time or contact us at [support@censys.io](mailto:support@censys.io) if the problem persists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1InternalServerErrorExample:
                  $ref: "#/components/examples/v1InternalServerErrorExample"
  /v1/bulk/certificates:
    post:
      tags:
        - certificates
      summary: Returns structured data about certificates in bulk for the specified SHA-256 fingerprints
      description:
        "> The Censys legacy v1 API contains API endpoints which are being maintained until replacement v2 endpoints are available.
        \n\nThe bulk endpoint returns, in bulk, the current structured data on many specific certificates.
        \n\nEach requested certificate will be available as a key in the response, regardless of whether or
        not we know anything about them. Any certificates which we don't know anything about will be replaced
        by an error, as shown at the top of the example below."
      operationId: bulkCertificateLookup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fingerprints:
                  type: array
                  items:
                    type: string
                  maxItems: 50
                  example:
                    - "13a88367a15e4e0e9d77158c95e6718d9158ac1bc30619f29ba7bf7d5befc50f"
                    - "48177e03b47bdcb3b6ab28a92f8005b95302418cd5b9ede77a97eb918e4a2da2"
                    - "d1997c5365c6f2c8205ef8bf1e146dc9ab5bc61e74f3c2dc146e0a509352ea77"
      responses:
        200:
          description: The records were successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
              examples:
                bulkCertificatesExample:
                  summary: Successful response
                  value:
                    13a88367a15e4e0e9d77158c95e6718d9158ac1bc30619f29ba7bf7d5befc50f:
                      error: "We do not know anything about this certificate."
                      error_type: "unknown"
                      status: "error"
                    48177e03b47bdcb3b6ab28a92f8005b95302418cd5b9ede77a97eb918e4a2da2:
                      raw: "MIIDQ...G9rw="
                      parsed: {}
                      metadata: {}
                      ct: {}
                    ...: {}
        429:
          description: Your query was not executed because you have exceeded your specified rate limit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1RateLimitExceededExample:
                  $ref: "#/components/examples/v1RateLimitExceededExample"
        500:
          description: An unexpected error occurred when trying to execute your query. Try again at a later time or contact us at [support@censys.io](mailto:support@censys.io) if the problem persists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1InternalServerErrorExample:
                  $ref: "#/components/examples/v1InternalServerErrorExample"
  /v1/data:
    get:
      tags:
        - data
      summary: Returns data on the types of scans (series) we perform
      description:
        "> The Censys legacy v1 API contains API endpoints which are being maintained until replacement v2 endpoints are available.
        \n\nThe Get Series endpoint returns a data on the types of scans we regularly perform (series)."
      operationId: getSeries
      responses:
        200:
          description: We were able to successfully retrieve a list of series.
          content:
            application/json:
              schema:
                type: object
                properties:
                  primary_series:
                    type: object
                    additionalProperties:
                      type: string
                  raw_series:
                    type: object
                    additionalProperties:
                      type: string
              examples:
                getSeriesExample:
                  summary: Successful response
                  value:
                    primary_series:
                      certificates:
                        id: "certificates"
                        name: "All X.509 Certificates"
                        description: "..."
                        details_url: "https://..."
                        latest_result: {}
                      domains: {}
                      ipv4: {}
                    raw_series:
                      22-ssh-banner-full_ipv4:
                        {}
                      ...: {}
        429:
          description: Your query was not executed because you have exceeded your specified rate limit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1RateLimitExceededExample:
                  $ref: "#/components/examples/v1RateLimitExceededExample"
        500:
          description: An unexpected error occurred when trying to execute your query. Try again at a later time or contact us at [support@censys.io](mailto:support@censys.io) if the problem persists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1InternalServerErrorExample:
                  $ref: "#/components/examples/v1InternalServerErrorExample"
  /v1/data/{series}:
    get:
      tags:
        - data
      summary: Returns data about a specified scan (series)
      description:
        "> The Censys legacy v1 API contains API endpoints which are being maintained until replacement v2 endpoints are available.
        \n\nThe View Series endpoint returns data we have about a particular series—a scan of the same
        protocol and destination across time—including the list of scans."
      operationId: viewSeries
      parameters:
        - name: series
          in: path
          description: The ID of the series.
          required: true
          schema:
            type: string
            example: "certificates-daily-added"
      responses:
        200:
          description: We were able to successfully retrieve a series.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "certificates-daily-added"
                  name:
                    type: string
                    example: "Certificates by date added"
                  description:
                    type: string
                    example: "..."
                  results:
                    type: object
                    properties:
                      historical:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            timestamp:
                              type: string
                            details_url:
                              type: string
                        example:
                          - id: "20150912T1329"
                            timestamp: "20150912T132919"
                            details_url: "https://..."
                          - id: "20150930T0056"
                            timestamp: "20150930T005634"
                            details_url: "https://..."
                      latest:
                        type: object
                        properties:
                          id:
                            type: string
                          timestamp:
                            type: string
                          details_url:
                            type: string
                        example:
                          id: "20150930T0056"
                          timestamp: "20150930T005634"
                          details_url: "https://..."
        404:
          description: The requested series does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1NotFoundExample:
                  $ref: "#/components/examples/v1NotFoundExample"
        429:
          description: Your query was not executed because you have exceeded your specified rate limit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1RateLimitExceededExample:
                  $ref: "#/components/examples/v1RateLimitExceededExample"
        500:
          description: An unexpected error occurred when trying to execute your query. Try again at a later time or contact us at [support@censys.io](mailto:support@censys.io) if the problem persists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1InternalServerErrorExample:
                  $ref: "#/components/examples/v1InternalServerErrorExample"
  /v1/data/{series}/{result}:
    get:
      tags:
        - data
      summary: Returns data on a particular scan
      description:
        "> The Censys legacy v1 API contains API endpoints which are being maintained until replacement v2 endpoints are available.
        \n\nThe View Result endpoint returns data on a particular scan (result), as found in the Get
        Series or View Series endpoints."
      operationId: viewResult
      parameters:
        - name: series
          in: path
          description: The ID of the series.
          required: true
          schema:
            type: string
            example: "certificates-daily-added"
        - name: result
          in: path
          description: The ID of the result.
          required: true
          schema:
            type: string
            example: "20150930T0056"
      responses:
        200:
          description: We were able to successfully retrieve a result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "20150930T0056"
                  timestamp:
                    type: string
                    example: "20150930T005634"
                  files:
                    type: object
                    properties:
                      zmap-results:
                        type: object
                        properties:
                          file_type:
                            type: string
                            example: csv
                          schema:
                            type: object
                          download_path:
                            type: string
                            example: "https://..."
                          sha256_fingerprint:
                            type: string
                            example: 693b6bdd6b954aed3981ca9d801bb1317bfdb19f560f968781823b9abef8eaa3
                          size:
                            type: integer
                            example: 304
                      zgrab-results:
                        type: object
                        additionalProperties:
                          type: object
                        properties:
                          file_type:
                            type: string
                            example: csv
                          schema:
                            type: object
                            properties:
                              timestamp:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: "date"
                              ip:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: "ip"
                          download_path:
                            type: string
                            example: "https://..."
                          sha256_fingerprint:
                            type: string
                            example: 693b6bdd6b954aed3981ca9d801bb1317bfdb19f560f968781823b9abef8eaa3
                          size:
                            type: integer
                            example: 304
                      download_path:
                        type: string
                        example: "https://..."
                      sha256_fingerprint:
                        type: string
                        example: cdd962fe956674749ef5d40d59c423a0be77432a246bcd223c3346576c9479ff
                      size:
                        type: integer
                        example: 21707
        404:
          description: The requested series or result does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1NotFoundExample:
                  $ref: "#/components/examples/v1NotFoundExample"
        429:
          description: Your query was not executed because you have exceeded your specified rate limit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1RateLimitExceededExample:
                  $ref: "#/components/examples/v1RateLimitExceededExample"
        500:
          description: An unexpected error occurred when trying to execute your query. Try again at a later time or contact us at [support@censys.io](mailto:support@censys.io) if the problem persists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1InternalServerErrorExample:
                  $ref: "#/components/examples/v1InternalServerErrorExample"
  /v1/account:
    get:
      tags:
        - account
      summary: Returns information about your account
      description:
        "> The Censys legacy v1 API contains API endpoints which are being maintained until replacement v2 endpoints are available.
        \n\nThe Account endpoint returns information about your Censys account. Most importantly, you
        can use this endpoint to check on your current query quota usage."
      operationId: account
      responses:
        200:
          description: Account information was successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: string
                    example: "john_doe"
                  email:
                    type: string
                    example: "john@example.com"
                  first_login:
                    type: string
                    example: "2018-01-01 12:00:00"
                  last_login:
                    type: string
                    example: "2021-01-01 12:00:00"
                  quota:
                    type: object
                    properties:
                      used:
                        type: integer
                        example: 10
                      resets_at:
                        type: string
                        example: "2021-02-01 12:00:00"
                      allowance:
                        type: integer
                        example: 250
        403:
          description: Your request did not include a valid Authorization header.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1ForbiddenExample:
                  $ref: "#/components/examples/v1ForbiddenExample"
        429:
          description: Your query was not executed because you have exceeded your specified rate limit.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1RateLimitExceededExample:
                  $ref: "#/components/examples/v1RateLimitExceededExample"
        500:
          description: An unexpected error occurred when trying to execute your query. Try again at a later time or contact us at [support@censys.io](mailto:support@censys.io) if the problem persists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1ApiErrorResponse"
              examples:
                v1InternalServerErrorExample:
                  $ref: "#/components/examples/v1InternalServerErrorExample"
  /v2/tags:
    get:
      tags:
        - tags
      summary: Returns a list of all tags
      description: Returns a list of all tags for a team
      operationId: listTags
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      tags:
                        type: array
                        items:
                          $ref: "#/components/schemas/Tag"
    post:
      tags:
        - tags
      summary: Creates a new tag
      description: Creates a new tag for a team
      operationId: createTag
      requestBody:
        description: Tag to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Tag"
  /v2/tags/{id}:
    get:
      tags:
        - tags
      summary: Returns a tag
      description: Returns a tag for a team
      operationId: getTag
      parameters:
        - name: id
          in: path
          description: The unique ID of the tag.
          required: true
          schema:
            type: string
            example: "123"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Tag"
    put:
      tags:
        - tags
      summary: Updates a tag
      description: Updates a tag for a team
      operationId: updateTag
      parameters:
        - name: id
          in: path
          description: The unique ID of the tag.
          required: true
          schema:
            type: string
            example: "123"
      requestBody:
        description: Tag to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Tag"
    delete:
      tags:
        - tags
      summary: Deletes a tag
      description: Deletes a tag for a team
      operationId: deleteTag
      parameters:
        - name: id
          in: path
          description: The unique ID of the tag.
          required: true
          schema:
            type: string
            example: "123"
      responses:
        204:
          description: "No Content"
  /v2/tags/{id}/hosts:
    get:
      tags:
        - hosts
        - tags
      summary: Returns a list of hosts for a tag
      description: Returns a list of hosts for a tag
      operationId: listHostsForTag
      parameters:
        - name: id
          in: path
          description: The unique ID of the tag.
          required: true
          schema:
            type: string
            example: "123"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      hosts:
                        type: array
                        items:
                          type: object
                          properties:
                            ip:
                              type: string
                              example: "1.1.1.1"
                            tagged_at:
                              type: string
                              example: "2021-01-01T12:00:00.000000Z"
                              format: date-time
  /v2/tags/{id}/certificates:
    get:
      tags:
        - certs
        - tags
      summary: Returns a list of certificates for a tag
      description: Returns a list of certificates for a tag
      operationId: listCertificatesForTag
      parameters:
        - name: id
          in: path
          description: The unique ID of the tag.
          required: true
          schema:
            type: string
            example: "tag-name"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      certs:
                        type: array
                        items:
                          type: object
                          properties:
                            fingerprint:
                              type: string
                              example: e58e89a726d80bb0219b218c3ab9d818b4be75d77959508400d660ebe1c1be3d
                            tagged_at:
                              type: string
                              example: "2021-01-01T12:00:00.000000Z"
                              format: date-time
  /v2/hosts/{ip}/tags:
    get:
      tags:
        - hosts
        - tags
      summary: Returns a list of tags on the given host.
      description: |
        Returns a list of tags on the given host.
      operationId: getTagsByHost
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: 1.1.1.1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      ip:
                        type: string
                        example: 1.1.1.1
                      tags:
                        type: array
                        items:
                          $ref: "#/components/schemas/Tag"
  /v2/hosts/{ip}/tags/{id}:
    put:
      tags:
        - hosts
        - tags
      summary: Adds a tag on the given host.
      description: |
        Adds a tag on the given host.
      operationId: tagHost
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: 1.1.1.1
        - name: id
          in: path
          description: The unique ID of the tag.
          required: true
          schema:
            type: string
            example: "123"
      responses:
        204:
          description: "No Content"
    delete:
      tags:
        - hosts
        - tags
      summary: Removes a tag on the given host.
      description: |
        Removes a tag on the given host.
      operationId: untagHost
      parameters:
        - name: ip
          in: path
          description: The IP Address of the requested host.
          required: true
          schema:
            type: string
            example: 1.1.1.1
        - name: id
          in: path
          description: The unique ID of the tag.
          required: true
          schema:
            type: string
            example: "123"
      responses:
        204:
          description: "No Content"
  /v2/certificates/{fingerprint}/tags:
    get:
      tags:
        - certs
        - tags
      summary: Returns a list of tags on the given certificate.
      description: |
        Returns a list of tags on the given certificate.
      operationId: getTagsByCert
      parameters:
        - name: fingerprint
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                properties:
                  result:
                    type: object
                    properties:
                      fingerprint:
                        type: string
                        example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
                      tags:
                        type: array
                        items:
                          $ref: "#/components/schemas/Tag"
  /v2/certificates/{fingerprint}/tags/{id}:
    put:
      tags:
        - certs
        - tags
      summary: Adds a tag on the given certificate.
      description: |
        Adds a tag on the given certificate.
      operationId: tagCert
      parameters:
        - name: fingerprint
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
        - name: id
          in: path
          description: The unique ID of the tag.
          required: true
          schema:
            type: string
            example: "tag-name"
      responses:
        204:
          description: "No Content"
    delete:
      tags:
        - certs
        - tags
      summary: Removes a tag on the given certificate.
      description: |
        Removes a tag on the given certificate.
      operationId: untagCert
      parameters:
        - name: fingerprint
          in: path
          description: The SHA-256 fingerprint of the requested certificate.
          required: true
          schema:
            type: string
            example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
        - name: id
          in: path
          description: The unique ID of the tag.
          required: true
          schema:
            type: string
            example: "tag-name"
      responses:
        204:
          description: "No Content"
components:
  schemas:
    ApiResponse:
      title: Success Response (v2)
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: OK
        result:
          type: object
          properties: {}
    ApiErrorResponse:
      title: Error Response (v2)
      type: object
      properties:
        code:
          type: integer
          example: 422
        status:
          type: string
          example: Unprocessable Entity
        error:
          type: string
    PerspectiveID:
      type: string
      description: The name of the network from which Censys observed this service.
      enum: [PERSPECTIVE_NTT, PERSPECTIVE_TELIA, PERSPECTIVE_HE]
    Location:
      type: object
      properties:
        continent:
          type: string
          example: North America
        country:
          type: string
          example: United States
        country_code:
          type: string
          example: US
        postal_code:
          type: string
          example: "48104"
          maxLength: 10
        timezone:
          type: string
          example: America/Michigan
        coordinates:
          type: object
          properties:
            latitude:
              type: string
              example: "42.273"
            longitude:
              type: string
              example: "-83.751"
        registered_country:
          type: string
          example: United States
        registered_country_code:
          type: string
          example: US
    Routing:
        type: object
        properties:
          asn:
            type: integer
            example: 15169
          description:
            type: string
            example: GOOGLE
          bgp_prefix:
            type: string
            example: 8.8.8.0/24
          name:
            type: string
            example: GOOGLE
          country_code:
            type: string
            example: US
    ServiceID:
      type: object
      description: Object used to uniquely identify a service based on its 3-tuple of
        (port, transport_protocol, service_name) for example `80-TCP-HTTP`.
      properties:
        port:
          type: integer
          description: Service port number.
          example: 443
        transport_protocol:
          type: string
          description: Service transport protocol.
          enum: [TCP, UDP, QUIC]
          example: TCP
        service_name:
          type: string
          description: Service name.
          example: HTTP
    ServiceRemovedFromHostNotObserved:
        type: object
        required:
          - _reason
        properties:
          _reason:
            type: string
            enum: [not_observed,]
          not_observed:
            type: object
            properties:
              not_observed_at:
                type: string
                format: date-time
              perspective_id:
                $ref: "#/components/schemas/PerspectiveID"
    ServiceRemovedFromHostExpired:
        type: object
        required:
          - _reason
        properties:
          _reason:
            type: string
            enum: [expired,]
          expired:
            type: object
            properties:
              expired_at:
                type: string
                format: date-time
    ServiceObservedEvent:
        type: object
        required:
          - _event
        properties:
          _event:
            type: string
            enum: [service_observed,]
          service_observed:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/ServiceID"
              observed_at:
                type: string
                format: date-time
              perspective_id:
                $ref: "#/components/schemas/PerspectiveID"
              changed_fields:
                type: array
                description: A list of fields that changed during this observation.
                items:
                  type: object
                  properties:
                    field_name:
                      type: string
                      example: services.banner
    LocationUpdatedEvent:
        type: object
        required:
          - _event
        properties:
          _event:
            type: string
            enum: [location_updated,]
          location_updated:
            type: object
            properties:
              location:
                $ref: "#/components/schemas/Location"
    RoutingUpdatedEvent:
        type: object
        required:
          - _event
        properties:
          _event:
            type: string
            enum: [routing_updated,]
          routing_updated:
            type: object
            properties:
              routing:
                $ref: "#/components/schemas/Routing"
    ServiceRemovedFromHostEvent:
        type: object
        required:
          - _event
        properties:
          _event:
            type: string
            enum: [service_removed_from_host,]
          service_removed_from_host:
            type: object
            oneOf:
              - $ref: "#/components/schemas/ServiceRemovedFromHostNotObserved"
              - $ref: "#/components/schemas/ServiceRemovedFromHostExpired"
            discriminator:
              propertyName: _reason
              mapping:
                not_observed: "#/components/schemas/ServiceRemovedFromHostNotObserved"
                expired: "#/components/schemas/ServiceRemovedFromHostExpired"
            properties:
              _reason:
                type: string
                description: Discriminator which provides the type of reason this object represents.
                example: "not_observed"
              id:
                $ref: "#/components/schemas/ServiceID"
    ServiceAddedToHostEvent:
        type: object
        required:
          - _event
        properties:
          _event:
            type: string
            enum: [service_added_to_host,]
          service_added_to_host:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/ServiceID"
              observed_at:
                type: string
                format: date-time
              perspective_id:
                $ref: "#/components/schemas/PerspectiveID"
    Host:
      type: object
      properties:
        ip:
          type: string
          example: 1.1.1.1
        services:
          type: array
          items:
            type: object
            additionalProperties: true
            properties:
              port:
                type: integer
              service_name:
                type: string
              extended_service_name:
                type: string
              transport_protocol:
                type: string
              software:
                type: array
                items:
                  type: string
              truncated:
                type: boolean
                example: false
              perspective_id:
                $ref: "#/components/schemas/PerspectiveID"
          example:
            - port: 53
              service_name: DNS
              transport_protocol: UDP
              extended_service_name: DNS
              dns:
                server_type: "FORWARDING"
            - port: 443
              service_name: HTTP
              transport_protocol: TCP
              extended_service_name: HTTPS
              http:
                request:
                  method: "GET"
                  uri: "https://1.1.1.1/"
                  headers:
                    User_Agent:
                      - "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)"
                    Accept:
                      - "*/*"
                response:
                  body: "<!DOCTYPE html>..."
                  protocol: "HTTP/1.1"
                  body_size: 1000
                  status_code: 404
                  status_reason: Not Found
                  headers:
                    Content_Length:
                      - "<REDACTED>"
                    Content_Type:
                      - "text/html; charset=UTF-8"
                    Server:
                      - "HTTP server (unknown)"
                    Date:
                      - "<REDACTED>"
                  html_tags:
                    - "<title>Error 404 (Not Found)!!1</title>"
                    - "<meta charset=utf-8>"
                    - "<meta name=viewport content=\"initial-scale=1, minimum-scale=1, width=device-width\">"
              certificate: "e58e89a726d80bb0219b218c3ab9d818b4be75d77959508400d660ebe1c1be3d"
              tls: {}
        location_updated_at:
          type: string
          example: "2021-03-30T14:53:12.980328Z"
        location:
          $ref: "#/components/schemas/Location"
        autonomous_system_updated_at:
          type: string
          example: "2021-04-09T17:33:12.118684Z"
        autonomous_system:
          $ref: "#/components/schemas/Routing"
        operating_system:
          type: object
          properties:
            product:
              type: string
              example: Linux
            vendor:
              type: string
              example: Ubuntu
            version:
              type: string
              example: "18.04"
            edition:
              type: string
              example: "bionic"
            uniform_resource_identifier:
              type: string
              example: "cpe:2.3:o:*:linux:*:*:*:*:*:*:*:*"
            other:
              type: object
    HostHit:
      type: object
      properties:
        ip:
          type: string
          example: 8.8.8.8
        services:
          type: array
          items:
            type: object
            additionalProperties: true
            properties:
              port:
                type: integer
              service_name:
                type: string
              transport_protocol:
                type: string
              certificate:
                type: string
          example:
            - port: 53
              service_name: DNS
              transport_protocol: UDP
            - port: 443
              service_name: HTTP
              transport_protocol: TCP
              certificate: "e58e89a726d80bb0219b218c3ab9d818b4be75d77959508400d660ebe1c1be3d"
        location:
          $ref: "#/components/schemas/Location"
        autonomous_system:
          $ref: "#/components/schemas/Routing"
    VirtualHostHit:
      allOf:
        - type: object
          properties:
            name:
              type: string
              example: "dns.google"
        - $ref: "#/components/schemas/HostHit"
    HostEvent:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ServiceObservedEvent"
        - $ref: "#/components/schemas/LocationUpdatedEvent"
        - $ref: "#/components/schemas/RoutingUpdatedEvent"
        - $ref: "#/components/schemas/ServiceRemovedFromHostEvent"
        - $ref: "#/components/schemas/ServiceAddedToHostEvent"
      discriminator:
        propertyName: _event
        mapping:
          service_observed: "#/components/schemas/ServiceObservedEvent"
          location_updated: "#/components/schemas/LocationUpdatedEvent"
          routing_updated: "#/components/schemas/RoutingUpdatedEvent"
          service_removed_from_host: "#/components/schemas/ServiceRemovedFromHostEvent"
          service_added_to_host: "#/components/schemas/ServiceAddedToHostEvent"
      properties:
        _event:
          type: string
          description: Discriminator which provides the type of event this object represents.
          example: "service_observed"
        timestamp:
          type: string
          format: date-time
    HostComment:
      type: object
      required:
        - contents
      properties:
        id:
          type: string
          example: "comment-id"
        ip:
          type: string
          example: 1.1.1.1
        author_id:
          type: string
        contents:
          type: string
          example: "**This is a comment.**"
        created_at:
          type: string
          format: date-time
          example: "2016-01-01T00:00:00Z"
    CertComment:
      type: object
      required:
        - contents
      properties:
        id:
          type: string
          example: "comment-id"
        fingerprint:
          type: string
          example: "9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc"
        author_id:
          type: string
        contents:
          type: string
          example: "**This is a comment.**"
        created_at:
          type: string
          format: date-time
          example: "2016-01-01T00:00:00Z"
    Tag:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: integer
          readOnly: true
        name:
          type: string
          example: "tag-name"
        metadata:
          type: object
          properties:
            color:
              type: string
              example: "ff6113"
        created_at:
          type: string
          format: date-time
          example: "2021-01-01T00:00:00.000000000Z"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2021-02-01T00:00:00.000000000Z"
          readOnly: true
    v1ApiErrorResponse:
      title: Error Response (v1)
      type: object
      properties:
        error_code:
          type: integer
          example: 400
        error:
          type: string
          example: "query could not be parsed"
    Certificate:
      type: object
      properties:
        raw:
          type: string
          example: "MIIDQ...G9rw="
        parsed:
          type: object
          properties:
            fingerprint_sha1:
              type: string
              example: 8740f09afc54752b26b295cdc6393c6b8ffd9e6a
            fingerprint_sha256:
              type: string
              example: 9d3b51a6b80daf76e074730f19dc01e643ca0c3127d8f48be64cf3302f6622cc
            fingerprint_md5:
              type: string
              example: 0f263d5e56288c37ade29f7b9977f38d
            serial_number:
              type: string
              example: 5878999135690490607
            subject_key_info:
              type: object
            names:
              type: array
              items:
                type: string
                example: "*.google.com"
            subject_dn:
              type: string
              example: "C=US, ST=California, L=Mountain View, O=Google Inc, CN=*.google.com"
            subject:
              type: object
            issuer_dn:
              type: string
              example: "C=US, O=Google Inc, CN=Google Internet Authority G2"
            issuer:
              type: object
            signature:
              type: object
            redacted:
              type: boolean
              example: false
            validity:
              type: object
            version:
              type: integer
              example: 3
            extensions:
              type: object
        ct:
          type: object    
  examples:
    unauthorizedExample:
      summary: "Unauthorized Request"
      value:
        code: 401
        status: "Unauthorized"
        error: "You must authenticate with a valid API ID and secret."
    invalidIpExample:
      summary: "Invalid IP"
      value:
        code: 422
        status: "Unprocessable Entity"
        error: "Invalid ip address"
    invalidSearchExample:
      summary: "Invalid Search"
      value:
        code: 400
        status: "Bad Request"
        error: "Invalid search. Your query could not be parsed"
    invalidCursorExample:
      summary: "Invalid Cursor"
      value:
        code: 422
        status: "Unprocessable Entity"
        error: "Invalid cursor"
    invalidFieldExample:
      summary: "Invalid Field"
      value:
        code: 400
        status: "Bad Request"
        error: "Invalid field: ''. Did you mean ''?"
    invalidNumBucketsExample:
      summary: "Invalid Num Buckets"
      value:
        code: 400
        status: "Bad Request"
        error: "Reports allow for a maximum of 1000 buckets."
    v1BadRequestExample:
      summary: "Bad Request"
      value:
        error_code: 400
        error: "query could not be parsed"
    v1ForbiddenExample:
      summary: "Forbidden"
      value:
        status: error
        error_type: "unauthorized"
        error: "Unauthorized. You must authenticate with a valid API ID and secret."
    v1NotFoundExample:
      summary: "Not Found"
      value:
        error_code: 404
        error: "page not found"
    v1RateLimitExceededExample:
      summary: "Rate Limit Exceeded"
      value:
        error_code: 429
        error: "rate limit exceeded"
    v1InternalServerErrorExample:
      summary: "Internal Server Error"
      value:
        error_code: 500
        error: "unknown error occurred"
  securitySchemes:
    basicAuth:
      type: http
      description: Authenticate using your API ID and secret
      scheme: basic